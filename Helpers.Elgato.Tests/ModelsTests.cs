using Xunit;

namespace Helpers.Elgato.Tests;

public class ModelsTests
{
	[Theory]
	[InlineData(143, 7000)]
	[InlineData(144, 6979.60199)]
	[InlineData(145, 6959.20398)]
	[InlineData(146, 6938.80597)]
	[InlineData(147, 6918.40796)]
	[InlineData(148, 6898.00995)]
	[InlineData(149, 6877.61194)]
	[InlineData(150, 6857.21393)]
	[InlineData(151, 6836.81592)]
	[InlineData(152, 6816.41791)]
	[InlineData(153, 6796.0199)]
	[InlineData(154, 6775.621891)]
	[InlineData(155, 6755.223881)]
	[InlineData(156, 6734.825871)]
	[InlineData(157, 6714.427861)]
	[InlineData(158, 6694.029851)]
	[InlineData(159, 6673.631841)]
	[InlineData(160, 6653.233831)]
	[InlineData(161, 6632.835821)]
	[InlineData(162, 6612.437811)]
	[InlineData(163, 6592.039801)]
	[InlineData(164, 6571.641791)]
	[InlineData(165, 6551.243781)]
	[InlineData(166, 6530.845771)]
	[InlineData(167, 6510.447761)]
	[InlineData(168, 6490.049751)]
	[InlineData(169, 6469.651741)]
	[InlineData(170, 6449.253731)]
	[InlineData(171, 6428.855721)]
	[InlineData(172, 6408.457711)]
	[InlineData(173, 6388.059701)]
	[InlineData(174, 6367.661692)]
	[InlineData(175, 6347.263682)]
	[InlineData(176, 6326.865672)]
	[InlineData(177, 6306.467662)]
	[InlineData(178, 6286.069652)]
	[InlineData(179, 6265.671642)]
	[InlineData(180, 6245.273632)]
	[InlineData(181, 6224.875622)]
	[InlineData(182, 6204.477612)]
	[InlineData(183, 6184.079602)]
	[InlineData(184, 6163.681592)]
	[InlineData(185, 6143.283582)]
	[InlineData(186, 6122.885572)]
	[InlineData(187, 6102.487562)]
	[InlineData(188, 6082.089552)]
	[InlineData(189, 6061.691542)]
	[InlineData(190, 6041.293532)]
	[InlineData(191, 6020.895522)]
	[InlineData(192, 6000.497512)]
	[InlineData(193, 5980.099502)]
	[InlineData(194, 5959.701493)]
	[InlineData(195, 5939.303483)]
	[InlineData(196, 5918.905473)]
	[InlineData(197, 5898.507463)]
	[InlineData(198, 5878.109453)]
	[InlineData(199, 5857.711443)]
	[InlineData(200, 5837.313433)]
	[InlineData(201, 5816.915423)]
	[InlineData(202, 5796.517413)]
	[InlineData(203, 5776.119403)]
	[InlineData(204, 5755.721393)]
	[InlineData(205, 5735.323383)]
	[InlineData(206, 5714.925373)]
	[InlineData(207, 5694.527363)]
	[InlineData(208, 5674.129353)]
	[InlineData(209, 5653.731343)]
	[InlineData(210, 5633.333333)]
	[InlineData(211, 5612.935323)]
	[InlineData(212, 5592.537313)]
	[InlineData(213, 5572.139303)]
	[InlineData(214, 5551.741294)]
	[InlineData(215, 5531.343284)]
	[InlineData(216, 5510.945274)]
	[InlineData(217, 5490.547264)]
	[InlineData(218, 5470.149254)]
	[InlineData(219, 5449.751244)]
	[InlineData(220, 5429.353234)]
	[InlineData(221, 5408.955224)]
	[InlineData(222, 5388.557214)]
	[InlineData(223, 5368.159204)]
	[InlineData(224, 5347.761194)]
	[InlineData(225, 5327.363184)]
	[InlineData(226, 5306.965174)]
	[InlineData(227, 5286.567164)]
	[InlineData(228, 5266.169154)]
	[InlineData(229, 5245.771144)]
	[InlineData(230, 5225.373134)]
	[InlineData(231, 5204.975124)]
	[InlineData(232, 5184.577114)]
	[InlineData(233, 5164.179104)]
	[InlineData(234, 5143.781095)]
	[InlineData(235, 5123.383085)]
	[InlineData(236, 5102.985075)]
	[InlineData(237, 5082.587065)]
	[InlineData(238, 5062.189055)]
	[InlineData(239, 5041.791045)]
	[InlineData(240, 5021.393035)]
	[InlineData(241, 5000.995025)]
	[InlineData(242, 4980.597015)]
	[InlineData(243, 4960.199005)]
	[InlineData(244, 4939.800995)]
	[InlineData(245, 4919.402985)]
	[InlineData(246, 4899.004975)]
	[InlineData(247, 4878.606965)]
	[InlineData(248, 4858.208955)]
	[InlineData(249, 4837.810945)]
	[InlineData(250, 4817.412935)]
	[InlineData(251, 4797.014925)]
	[InlineData(252, 4776.616915)]
	[InlineData(253, 4756.218905)]
	[InlineData(254, 4735.820896)]
	[InlineData(255, 4715.422886)]
	[InlineData(256, 4695.024876)]
	[InlineData(257, 4674.626866)]
	[InlineData(258, 4654.228856)]
	[InlineData(259, 4633.830846)]
	[InlineData(260, 4613.432836)]
	[InlineData(261, 4593.034826)]
	[InlineData(262, 4572.636816)]
	[InlineData(263, 4552.238806)]
	[InlineData(264, 4531.840796)]
	[InlineData(265, 4511.442786)]
	[InlineData(266, 4491.044776)]
	[InlineData(267, 4470.646766)]
	[InlineData(268, 4450.248756)]
	[InlineData(269, 4429.850746)]
	[InlineData(270, 4409.452736)]
	[InlineData(271, 4389.054726)]
	[InlineData(272, 4368.656716)]
	[InlineData(273, 4348.258706)]
	[InlineData(274, 4327.860697)]
	[InlineData(275, 4307.462687)]
	[InlineData(276, 4287.064677)]
	[InlineData(277, 4266.666667)]
	[InlineData(278, 4246.268657)]
	[InlineData(279, 4225.870647)]
	[InlineData(280, 4205.472637)]
	[InlineData(281, 4185.074627)]
	[InlineData(282, 4164.676617)]
	[InlineData(283, 4144.278607)]
	[InlineData(284, 4123.880597)]
	[InlineData(285, 4103.482587)]
	[InlineData(286, 4083.084577)]
	[InlineData(287, 4062.686567)]
	[InlineData(288, 4042.288557)]
	[InlineData(289, 4021.890547)]
	[InlineData(290, 4001.492537)]
	[InlineData(291, 3981.094527)]
	[InlineData(292, 3960.696517)]
	[InlineData(293, 3940.298507)]
	[InlineData(294, 3919.900498)]
	[InlineData(295, 3899.502488)]
	[InlineData(296, 3879.104478)]
	[InlineData(297, 3858.706468)]
	[InlineData(298, 3838.308458)]
	[InlineData(299, 3817.910448)]
	[InlineData(300, 3797.512438)]
	[InlineData(301, 3777.114428)]
	[InlineData(302, 3756.716418)]
	[InlineData(303, 3736.318408)]
	[InlineData(304, 3715.920398)]
	[InlineData(305, 3695.522388)]
	[InlineData(306, 3675.124378)]
	[InlineData(307, 3654.726368)]
	[InlineData(308, 3634.328358)]
	[InlineData(309, 3613.930348)]
	[InlineData(310, 3593.532338)]
	[InlineData(311, 3573.134328)]
	[InlineData(312, 3552.736318)]
	[InlineData(313, 3532.338308)]
	[InlineData(314, 3511.940299)]
	[InlineData(315, 3491.542289)]
	[InlineData(316, 3471.144279)]
	[InlineData(317, 3450.746269)]
	[InlineData(318, 3430.348259)]
	[InlineData(319, 3409.950249)]
	[InlineData(320, 3389.552239)]
	[InlineData(321, 3369.154229)]
	[InlineData(322, 3348.756219)]
	[InlineData(323, 3328.358209)]
	[InlineData(324, 3307.960199)]
	[InlineData(325, 3287.562189)]
	[InlineData(326, 3267.164179)]
	[InlineData(327, 3246.766169)]
	[InlineData(328, 3226.368159)]
	[InlineData(329, 3205.970149)]
	[InlineData(330, 3185.572139)]
	[InlineData(331, 3165.174129)]
	[InlineData(332, 3144.776119)]
	[InlineData(333, 3124.378109)]
	[InlineData(334, 3103.9801)]
	[InlineData(335, 3083.58209)]
	[InlineData(336, 3063.18408)]
	[InlineData(337, 3042.78607)]
	[InlineData(338, 3022.38806)]
	[InlineData(339, 3001.99005)]
	[InlineData(340, 2981.59204)]
	[InlineData(341, 2961.19403)]
	[InlineData(342, 2940.79602)]
	[InlineData(343, 2920.39801)]
	[InlineData(344, 2900)]

	public void Test1(short elgato, short expectedKelvins)
	{
		var fraction = (elgato - 143) / 201d;
		Assert.InRange(fraction, 0, 1);
		var inverted = 1 - fraction;
		var actualKelvins = Math.Round(inverted * 4_100) + 2_900;
		Assert.Equal(expectedKelvins, actualKelvins);
	}
}
