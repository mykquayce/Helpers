using System.Linq;
using System.Text;
using Xunit;

namespace Helpers.TPLink.Tests
{
	public class EncryptionTests : IClassFixture<Fixtures.EncryptionServiceFixture>
	{
		private readonly IEncryptionService _sut;

		public EncryptionTests(Fixtures.EncryptionServiceFixture fixture)
		{
			_sut = fixture.EncryptionService;
		}

		[Theory]
		[InlineData("{\"system\":{\"get_sysinfo\":{}}}")]
		[InlineData("{\"system\":{\"get_sysinfo\":{}},\"emeter\":{\"get_realtime\":{}}}")]
		public void EncryptAndDecrypt_IsReversible(string s)
		{
			// Arrange, Act
			var one = Encoding.UTF8.GetBytes(s);
			var two = _sut.Encrypt(one);
			var three = _sut.Decrypt(two);

			// Assert
			Assert.NotEmpty(one);
			Assert.NotEmpty(two);
			Assert.NotEmpty(three);

			Assert.Equal(one, one);
			Assert.Equal(one, three);
		}

		[Theory]
		[InlineData("test", new byte[] { 223, 186, 201, 189, })]
		[InlineData("{\"system\":{\"get_sysinfo\":{}}}", new byte[] { 208, 242, 129, 248, 139, 255, 154, 247, 213, 239, 148, 182, 209, 180, 192, 159, 236, 149, 230, 143, 225, 135, 232, 202, 240, 139, 246, 139, 246, })]
		public void EncryptTest(string message, byte[] expected)
		{
			var before = Encoding.UTF8.GetBytes(message);

			var actual = _sut.Encrypt(before);

			Assert.NotEqual(before, actual);

			Assert.Equal(expected.Length, actual.Length);
			Assert.Equal(expected, actual);
		}

		[Theory]
		[InlineData(
			"{\"system\":{\"get_sysinfo\":{\"sw_ver\":\"1.0.4 Build 191111 Rel.143903\",\"hw_ver\":\"4.1\",\"model\":\"HS110(UK)\",\"deviceId\":\"8006D82222655E2A9134020CF3B18ABE1CFFD12E\",\"oemId\":\"01F4EAFA6D419E341FB3A952C3E7D9A0\",\"hwId\":\"469935032CA15745C0667D7BAD76EBC0\",\"rssi\":-55,\"longitude_i\":-21408,\"latitude_i\":535303,\"alias\":\"amp\",\"status\":\"new\",\"mic_type\":\"IOT.SMARTPLUGSWITCH\",\"feature\":\"TIM:ENE\",\"mac\":\"B0:95:75:E4:F9:88\",\"updating\":0,\"led_off\":0,\"relay_state\":1,\"on_time\":278494,\"active_mode\":\"none\",\"icon_hash\":\"\",\"dev_name\":\"Smart Wi-Fi Plug With Energy Monitoring\",\"next_action\":{\"type\":-1},\"ntc_state\":0,\"err_code\":0}}}",
			208, 242, 129, 248, 139, 255, 154, 247, 213, 239, 148, 182, 209, 180, 192, 159, 236, 149, 230, 143, 225, 135, 232, 202, 240, 139, 169,
			218, 173, 242, 132, 225, 147, 177, 139, 169, 152, 182, 134, 168, 156, 188, 254, 139, 226, 142, 234, 202, 251, 194, 243, 194, 243, 194,
			226, 176, 213, 185, 151, 166, 146, 161, 152, 168, 155, 185, 149, 183, 223, 168, 247, 129, 228, 150, 180, 142, 172, 152, 182, 135, 165,
			137, 171, 198, 169, 205, 168, 196, 230, 220, 254, 182, 229, 212, 229, 213, 253, 168, 227, 202, 232, 196, 230, 130, 231, 145, 248, 155,
			254, 183, 211, 241, 203, 233, 209, 225, 209, 231, 163, 155, 169, 155, 169, 155, 173, 152, 173, 232, 218, 155, 162, 147, 160, 148, 164,
			150, 166, 229, 163, 144, 210, 227, 219, 154, 216, 157, 172, 239, 169, 239, 171, 154, 168, 237, 207, 227, 193, 174, 203, 166, 239, 139,
			169, 147, 177, 129, 176, 246, 194, 135, 198, 128, 193, 247, 179, 135, 182, 143, 202, 249, 205, 252, 186, 248, 203, 138, 179, 134, 180,
			247, 196, 129, 182, 242, 203, 138, 186, 152, 180, 150, 254, 137, 192, 164, 134, 188, 158, 170, 156, 165, 156, 175, 154, 170, 153, 171,
			232, 169, 152, 173, 154, 174, 155, 216, 232, 222, 232, 223, 155, 172, 238, 175, 235, 220, 234, 175, 237, 174, 158, 188, 144, 178, 192,
			179, 192, 169, 139, 177, 156, 169, 156, 176, 146, 254, 145, 255, 152, 241, 133, 240, 148, 241, 174, 199, 229, 223, 242, 192, 241, 197,
			245, 205, 225, 195, 175, 206, 186, 211, 167, 210, 182, 211, 140, 229, 199, 253, 200, 251, 206, 253, 205, 254, 210, 240, 145, 253, 148,
			245, 134, 164, 158, 188, 221, 176, 192, 226, 206, 236, 159, 235, 138, 254, 139, 248, 218, 224, 194, 172, 201, 190, 156, 176, 146, 255,
			150, 245, 170, 222, 167, 215, 178, 144, 170, 136, 193, 142, 218, 244, 167, 234, 171, 249, 173, 253, 177, 228, 163, 240, 167, 238, 186,
			249, 177, 147, 191, 157, 251, 158, 255, 139, 254, 140, 233, 203, 241, 211, 135, 206, 131, 185, 252, 178, 247, 213, 249, 219, 182, 215,
			180, 150, 172, 142, 204, 252, 198, 255, 202, 240, 199, 242, 200, 141, 185, 131, 197, 252, 198, 254, 198, 228, 200, 234, 159, 239, 139,
			234, 158, 247, 153, 254, 220, 230, 214, 250, 216, 180, 209, 181, 234, 133, 227, 133, 167, 157, 173, 129, 163, 209, 180, 216, 185, 192,
			159, 236, 152, 249, 141, 232, 202, 240, 193, 237, 207, 160, 206, 145, 229, 140, 225, 132, 166, 156, 174, 153, 161, 149, 172, 152, 180,
			150, 247, 148, 224, 137, 255, 154, 197, 168, 199, 163, 198, 228, 222, 252, 146, 253, 147, 246, 212, 248, 218, 179, 208, 191, 209, 142,
			230, 135, 244, 156, 190, 132, 166, 132, 168, 138, 238, 139, 253, 162, 204, 173, 192, 165, 135, 189, 159, 204, 161, 192, 178, 198, 230,
			177, 216, 245, 179, 218, 250, 170, 198, 179, 212, 244, 163, 202, 190, 214, 246, 179, 221, 184, 202, 173, 212, 244, 185, 214, 184, 209,
			165, 202, 184, 209, 191, 216, 250, 214, 244, 154, 255, 135, 243, 172, 205, 174, 218, 179, 220, 178, 144, 170, 209, 243, 135, 254, 142,
			235, 201, 243, 222, 239, 146, 190, 156, 242, 134, 229, 186, 201, 189, 220, 168, 205, 239, 213, 229, 201, 235, 142, 252, 142, 209, 178,
			221, 185, 220, 254, 196, 244, 137, 244, 137)]
		[InlineData(
			"{\"system\":{\"get_sysinfo\":{\"sw_ver\":\"1.0.4 Build 191111 Rel.143903\",\"hw_ver\":\"4.1\",\"model\":\"HS110(UK)\",\"deviceId\":\"8006D82222655E2A9134020CF3B18ABE1CFFD12E\",\"oemId\":\"01F4EAFA6D419E341FB3A952C3E7D9A0\",\"hwId\":\"469935032CA15745C0667D7BAD76EBC0\",\"rssi\":-52,\"longitude_i\":-21408,\"latitude_i\":535303,\"alias\":\"amp\",\"status\":\"new\",\"mic_type\":\"IOT.SMARTPLUGSWITCH\",\"feature\":\"TIM:ENE\",\"mac\":\"B0:95:75:E4:F9:88\",\"updating\":0,\"led_off\":0,\"relay_state\":1,\"on_time\":285141,\"active_mode\":\"none\",\"icon_hash\":\"\",\"dev_name\":\"Smart Wi-Fi Plug With Energy Monitoring\",\"next_action\":{\"type\":-1},\"ntc_state\":0,\"err_code\":0}}}",
			208, 242, 129, 248, 139, 255, 154, 247, 213, 239, 148, 182, 209, 180, 192, 159, 236, 149, 230, 143, 225, 135, 232, 202, 240, 139, 169,
			218, 173, 242, 132, 225, 147, 177, 139, 169, 152, 182, 134, 168, 156, 188, 254, 139, 226, 142, 234, 202, 251, 194, 243, 194, 243, 194,
			226, 176, 213, 185, 151, 166, 146, 161, 152, 168, 155, 185, 149, 183, 223, 168, 247, 129, 228, 150, 180, 142, 172, 152, 182, 135, 165,
			137, 171, 198, 169, 205, 168, 196, 230, 220, 254, 182, 229, 212, 229, 213, 253, 168, 227, 202, 232, 196, 230, 130, 231, 145, 248, 155,
			254, 183, 211, 241, 203, 233, 209, 225, 209, 231, 163, 155, 169, 155, 169, 155, 173, 152, 173, 232, 218, 155, 162, 147, 160, 148, 164,
			150, 166, 229, 163, 144, 210, 227, 219, 154, 216, 157, 172, 239, 169, 239, 171, 154, 168, 237, 207, 227, 193, 174, 203, 166, 239, 139,
			169, 147, 177, 129, 176, 246, 194, 135, 198, 128, 193, 247, 179, 135, 182, 143, 202, 249, 205, 252, 186, 248, 203, 138, 179, 134, 180,
			247, 196, 129, 182, 242, 203, 138, 186, 152, 180, 150, 254, 137, 192, 164, 134, 188, 158, 170, 156, 165, 156, 175, 154, 170, 153, 171,
			232, 169, 152, 173, 154, 174, 155, 216, 232, 222, 232, 223, 155, 172, 238, 175, 235, 220, 234, 175, 237, 174, 158, 188, 144, 178, 192,
			179, 192, 169, 139, 177, 156, 169, 155, 183, 149, 249, 150, 248, 159, 246, 130, 247, 147, 246, 169, 192, 226, 216, 245, 199, 246, 194,
			242, 202, 230, 196, 168, 201, 189, 212, 160, 213, 177, 212, 139, 226, 192, 250, 207, 252, 201, 250, 202, 249, 213, 247, 150, 250, 147,
			242, 129, 163, 153, 187, 218, 183, 199, 229, 201, 235, 152, 236, 141, 249, 140, 255, 221, 231, 197, 171, 206, 185, 155, 183, 149, 248,
			145, 242, 173, 217, 160, 208, 181, 151, 173, 143, 198, 137, 221, 243, 160, 237, 172, 254, 170, 250, 182, 227, 164, 247, 160, 233, 189,
			254, 182, 148, 184, 154, 252, 153, 248, 140, 249, 139, 238, 204, 246, 212, 128, 201, 132, 190, 251, 181, 240, 210, 254, 220, 177, 208,
			179, 145, 171, 137, 203, 251, 193, 248, 205, 247, 192, 245, 207, 138, 190, 132, 194, 251, 193, 249, 193, 227, 207, 237, 152, 232, 140,
			237, 153, 240, 158, 249, 219, 225, 209, 253, 223, 179, 214, 178, 237, 130, 228, 130, 160, 154, 170, 134, 164, 214, 179, 223, 190, 199,
			152, 235, 159, 254, 138, 239, 205, 247, 198, 234, 200, 167, 201, 150, 226, 139, 230, 131, 161, 155, 169, 145, 164, 149, 161, 144, 188,
			158, 255, 156, 232, 129, 247, 146, 205, 160, 207, 171, 206, 236, 214, 244, 154, 245, 155, 254, 220, 240, 210, 187, 216, 183, 217, 134,
			238, 143, 252, 148, 182, 140, 174, 140, 160, 130, 230, 131, 245, 170, 196, 165, 200, 173, 143, 181, 151, 196, 169, 200, 186, 206, 238,
			185, 208, 253, 187, 210, 242, 162, 206, 187, 220, 252, 171, 194, 182, 222, 254, 187, 213, 176, 194, 165, 220, 252, 177, 222, 176, 217,
			173, 194, 176, 217, 183, 208, 242, 222, 252, 146, 247, 143, 251, 164, 197, 166, 210, 187, 212, 186, 152, 162, 217, 251, 143, 246, 134,
			227, 193, 251, 214, 231, 154, 182, 148, 250, 142, 237, 178, 193, 181, 212, 160, 197, 231, 221, 237, 193, 227, 134, 244, 134, 217, 186,
			213, 177, 212, 246, 204, 252, 129, 252, 129)]
		[InlineData("", 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 70, 60, 181, 211)]
		[InlineData("", 93, 0, 249, 123, 34, 114, 101, 115, 117, 108, 116, 34, 58, 123, 34, 105, 112, 34,
			58, 34, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 50, 51, 49, 34, 44, 34, 109, 97, 99, 34, 58, 34, 66, 48, 45, 57, 53, 45, 55, 53, 45,
			69, 52, 45, 70, 57, 45, 56, 56, 34, 44, 34, 100, 101, 118, 105, 99, 101, 95, 105, 100, 34, 58, 34, 70, 51, 49, 50, 53, 52, 66, 70, 55,
			66, 54, 55, 53, 69, 51, 65, 54, 55, 54, 54, 65, 70, 53, 48, 54, 57, 52, 53, 51, 52, 53, 48, 34, 44, 34, 111, 119, 110, 101, 114, 34,
			58, 34, 54, 50, 56, 52, 54, 56, 50, 54, 70, 70, 65, 55, 49, 57, 69, 67, 68, 55, 50, 50, 56, 57, 70, 56, 70, 70, 49, 65, 48, 65, 52, 51,
			34, 44, 34, 100, 101, 118, 105, 99, 101, 95, 116, 121, 112, 101, 34, 58, 34, 73, 79, 84, 46, 83, 77, 65, 82, 84, 80, 76, 85, 71, 83,
			87, 73, 84, 67, 72, 34, 44, 34, 100, 101, 118, 105, 99, 101, 95, 109, 111, 100, 101, 108, 34, 58, 34, 72, 83, 49, 49, 48, 40, 85, 75,
			41, 34, 44, 34, 104, 119, 95, 118, 101, 114, 34, 58, 34, 52, 46, 49, 34, 44, 34, 102, 97, 99, 116, 111, 114, 121, 95, 100, 101, 102,
			97, 117, 108, 116, 34, 58, 116, 114, 117, 101, 44, 34, 109, 103, 116, 95, 101, 110, 99, 114, 121, 112, 116, 95, 115, 99, 104, 109, 34,
			58, 123, 34, 105, 115, 95, 115, 117, 112, 112, 111, 114, 116, 95, 104, 116, 116, 112, 115, 34, 58, 102, 97, 108, 115, 101, 44, 34,
			101, 110, 99, 114, 121, 112, 116, 95, 116, 121, 112, 101, 34, 58, 34, 75, 76, 65, 80, 34, 44, 34, 104, 116, 116, 112, 95, 112, 111,
			114, 116, 34, 58, 56, 48, 125, 125, 44, 34, 101, 114, 114, 111, 114, 95, 99, 111, 100, 101, 34, 58, 48, 125)]
		[InlineData("", 70, 60, 181, 211)]
		public void DecryptTest(string expected, params int[] ints)
		{
			var bytes = ints.Select(i => (byte)i).ToArray();

			var decrypted = _sut.Decrypt(bytes);
			var actual = Encoding.UTF8.GetString(decrypted);
			Assert.Equal(expected, actual);
		}
	}
}
